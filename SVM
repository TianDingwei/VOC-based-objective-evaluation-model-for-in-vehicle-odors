import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Read the data
train_data = pd.read_excel('Train Set.xlsx', sheet_name='Interiors')
test_data = pd.read_excel('Validation Set.xlsx', sheet_name='Interiors')
val_data = pd.read_excel('Test Set.xlsx',sheet_name='Interiors')

X_train = train_data.iloc[:, :-1]
y_train = train_data.iloc[:, -1]
X_val = val_data.iloc[:, :-1]
y_val = val_data.iloc[:, -1]
X_test = test_data.iloc[:, :-1]
y_test = test_data.iloc[:, -1]

# Create a LabelEncoder instance
encoder = LabelEncoder()

# Fit the encoder to the training data and then transform the training, validation, and test data
y_train = encoder.fit_transform(y_train)
y_val = encoder.transform(y_val)
y_test = encoder.transform(y_test)

# Create a StandardScaler instance
scaler = StandardScaler()

# Fit the scaler to the training data and then transform the training, validation, and test data
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)
X_test = scaler.transform(X_test)

from sklearn.decomposition import PCA

# Create a PCA instance
pca = PCA(n_components=3)  # Here we are assuming we are reducing the data to 2 dimensions

# Fit PCA to the training data and then transform the training, validation, and test data
X_train = pca.fit_transform(X_train)
X_val = pca.transform(X_val)
X_test = pca.transform(X_test)

import xgboost as xgb
from sklearn.model_selection import GridSearchCV
from sklearn import svm

# Define the parameter grid
param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': [1, 0.1, 0.01, 0.001],
    'kernel': ['linear', 'rbf', 'poly', 'sigmoid'] # Here we are specifying four kernel functions
}

# Create an SVM model instance
svm_model = svm.SVC()

# Create a GridSearchCV instance
grid_search = GridSearchCV(svm_model, param_grid, cv=5)

# Fit the GridSearchCV to the training data
grid_search.fit(X_train, y_train)

# Get the best parameters
best_params = grid_search.best_params_
print('Best parameters: ', best_params)

# Get the best model
best_model = grid_search.best_estimator_

# Predict the training set
y_train_pred = best_model.predict(X_train)

# Calculate the training accuracy
train_accuracy = accuracy_score(y_train, y_train_pred)
print('SVM Model Train Accuracy: {:.2f}%'.format(train_accuracy * 100))

# Predict the validation set
y_val_pred = best_model.predict(X_val)

# Calculate the validation accuracy
val_accuracy = accuracy_score(y_val, y_val_pred)
print('SVM Model Validation Accuracy: {:.2f}%'.format(val_accuracy * 100))

# Predict the test set
y_test_pred = best_model.predict(X_test)

# Calculate the test accuracy
test_accuracy = accuracy_score(y_test, y_test_pred)
print('SVM Model Test Accuracy: {:.2f}%'.format(test_accuracy * 100))
